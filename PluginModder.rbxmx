<roblox version="4">
  <Item class="ModuleScript" referent="0">
    <Properties>
      <string name="Name">PluginModder</string>
      <string name="Source">--[[
    -init.lua-
    The root of the plugin, handles the front-end API.
    Written by Jrelvas (23/2/2021)
]]--
type Dictionary&lt;T> = {[string]: T}
type Array&lt;T> = {[number]: T}
local OWNERSHIP_ENDPOINT = "https://api.%s/ownership/hasasset"

local StudioService = game:GetService("StudioService")
local HttpService = game:GetService("HttpService")
local Http = require(script.Http)
local CodeRunner = require(script.CodeRunner)

local isElevated: boolean = false
local cachedPlugins: Dictionary&lt;Instance> = {}
do
    local _, err = pcall(error, "Looking at the source are we?")
    if string.match(err, "^builtin_") or string.match(err, "^sabuiltin_") then
        isElevated = true
     end
end

--Public API
local api = {}

api.settings = {
    proxy = "rprxy.xyz",
    pluginRef = nil
}

function api.loadPlugin(pluginId: number|string, injectSource: (LuaSourceContainer, string) -> string|nil?)
    pluginId = tostring(pluginId)
    local plugin = api.settings.pluginRef
    local domain = isElevated and "roblox.com" or api.settings.proxy

    assert(typeof(plugin) == "Instance" and plugin:IsA("Plugin"), "settings.pluginRef must be a reference to a plugin, this is required so emulated scripts get access to the plugin context")
    assert(type(domain) == "string", "Domain must be a string")

    local pluginInstance

    if not cachedPlugins[pluginId] then
        local result = Http.fetch(Http.addParams(string.format(OWNERSHIP_ENDPOINT, domain), {userId = StudioService:GetUserId(), assetId = pluginId}), {}, isElevated)

        if result.success and result.StatusCode ~= 200 then
            return {success = false, reason = "ServerError", result.StatusCode}
        elseif not result.success then
            if result.errorType == "HttpEnabled" then
                return {success = false, reason = "HttpEnabledIsFalse"}
            elseif result.errorType == "HttpError" then
                return {success = false, reason = "HttpError", result.httpError}
            end
            return {success = false, reason = "UnknownHttpError"}
        end

        local ownsPlugin: boolean = HttpService:JSONDecode(result.Body)

        if not ownsPlugin then
            return {success = false, reason = "PluginNotOwned"}
        end

        pluginInstance = game:GetObjects(string.format("rbxassetid://%s", pluginId))[1]
        cachedPlugins[pluginId] = pluginInstance:Clone()
    else
        pluginInstance = cachedPlugins[pluginId]:Clone()
    end
    local scriptsToExecute: Array&lt;LuaSourceContainer> = {} --Make sure scripts only run when everything is handled!

    for _, instance in ipairs(pluginInstance:GetDescendants()) do
        if instance:IsA("LuaSourceContainer") then
            local newSource: string = instance.Source
            if injectSource then
                newSource = injectSource(instance)
            end

            if newSource then
                instance.Source = newSource
            end

            if instance:IsA("BaseScript") then
                instance.Disabled = true
                table.insert(scriptsToExecute, instance)
            end
        end
    end

    for _, executableScript in ipairs(scriptsToExecute) do
        CodeRunner.loadModule(executableScript)(plugin) --Execute every script
    end

    return {success = true}
end

function api.addModules(modules: Array&lt;ModuleScript>)
    CodeRunner.addModules(modules)
end
return api</string>
    </Properties>
    <Item class="ModuleScript" referent="1">
      <Properties>
        <string name="Name">CodeRunner</string>
        <string name="Source">--[[
    -init.lua (CodeRunner)-
    Simulate module requiring if we have an elevated context, since it's impossible to require modules created at runtime
    Written by Jrelvas (24/2/2021)
]]--
local BASE_CODE = 

[[local originalRequire = require
local require = originalRequire(script.Parent).loadModule
local script = originalRequire(script.Parent).getInstance("%s")
originalRequire = nil
%s]] --Override script and require with this module

type Dictionary&lt;T> = {[string]: T}
type Array&lt;T> = {[number]: T}


local api = {}
local availableModules: Array&lt;ModuleScript> = {}
local cachedModules: {[ModuleScript|string]: any} = {}
local debugIdList: Dictionary&lt;string> = {}

local loadstringHost = script.LoadstringHost:FindFirstChildOfClass("BindableFunction")

local isElevated: boolean = false
do
    local _, err = pcall(error, "Looking at the source are we?")
    if string.match(err, "^builtin_") or string.match(err, "^sabuiltin_") then
        isElevated = true
     end
end

local function isLoadstringEnabled() --I do love myself some ugly hacks! Get if loadstring is available, since studio refuses to keep this consistent for plugins and makes them depend on game behavior!
    local failure, errorMessage = pcall(loadstring)

    if failure and string.match(errorMessage, "available") then
        return false
    end

    return true
end

function api.addModules(modules: Array&lt;ModuleScript>)
    for _, module in ipairs(modules) do
        table.insert(availableModules, module)
    end
end

function api.getInstance(debugId: string): BaseScript
    assert(debugIdList[debugId], "Debug id not registered")
    return debugIdList[debugId]
end

function api.loadModule(module: LuaSourceContainer|number)
    if type(module) == "number" then --Requiring external modules isn't as much of a pain in an elevated context!
        if cachedModules[tostring(module)] then
            return cachedModules[tostring(module)]
        else --Use cached version, if we don't we'll receive an error when in an elevated context.
            local returnedValue = require(module)
            cachedModules[tostring(module)] = returnedValue
            return returnedValue
        end
    elseif not cachedModules[module] then
        local returnedValue
        local newSource = module.Source
        
        if module:IsA("BaseScript") then
            newSource = string.format("return function(plugin)\n%s\nend", newSource) --Wrap around scripts in a function that also receives a plugin argument, mimicking them.
        end

    local debugId = module:GetDebugId() --Unique id for each instance
    debugIdList[debugId] = module
    newSource = string.format(BASE_CODE, debugId, newSource)

        if not isElevated then --At least we can require modules created at runtime...
            local emulatorModule = Instance.new("ModuleScript")
            emulatorModule.Name = module.Name
            emulatorModule.Source = newSource
            emulatorModule.Parent = script
            returnedValue = require(emulatorModule)
        else
            game:DefineFastFlag("FFlagEnableLoadModule", true) --enable debug.loadmodule

            --selene: allow(incorrect_standard_library_use)
            if debug.loadmodule then --debug.loadmodule requires a module without caching it. Luckily for us, it's able to require at the right context level
                local emulatorModule = Instance.new("ModuleScript")
                emulatorModule.Name = module.Name
                emulatorModule.Source = newSource
                emulatorModule.Parent = script

                debug.loadmodule(emulatorModule)           
            elseif isLoadstringEnabled() then --debug.loadmodule is unavailable. At least we can rely on loadstring.
                returnedValue = loadstringHost:Invoke(newSource)()
            else --Our last option, time to bring out the hacks. Edit empty modules that are packed with the plugin itself.
                assert(#availableModules > 0, "CodeRunner has ran out of modules. You can add more using \"CodeRunner.addModules()\". Please note only modules that were packed with the plugin will work due to arbitrary Roblox restrictions.")
                if #availableModules &lt; 6 then
                    warn("CodeRunner is almost out of modules. You can add more using \"CodeRunner.addModules()\". Please note only modules that were packed with the plugin will work due to arbitrary Roblox restrictions.")
                end
    
                local emulatorModule = availableModules[#availableModules]
                emulatorModule.Name = module.Name
                emulatorModule.Source = newSource
                emulatorModule.Parent = script
    
                table.remove(emulatorModule, #availableModules)
    
                returnedValue = require(emulatorModule)
            end
        end


        cachedModules[module] = returnedValue
        return returnedValue
    else
        return(cachedModules[module])
    end
end

function api.getRemainingModules()
    return #availableModules
end

return api</string>
      </Properties>
      <Item class="Script" referent="2">
        <Properties>
          <string name="Name">LoadstringHost</string>
          <string name="Source">--[[
    -LoadstringHost.server.lua-
    Separate enviorement to run loadstring, so the env from the caller doesn't leak. It's critical we assign no variables whatsoever, or dispose of them.
    Written by Jrelvas (24/2/2021)
]]--
--#selene: allow(unused_variable)

Instance.new("BindableFunction").Parent = script
local plugin = nil --Modules don't have access to plugin; emulate this.

script:FindFirstChildOfClass("BindableFunction").OnInvoke = function(source: string)
    source = "source = nil\n"..source
    return loadstring(source)
end</string>
        </Properties>
      </Item>
    </Item>
    <Item class="ModuleScript" referent="3">
      <Properties>
        <string name="Name">Http</string>
        <string name="Source">--[[
    -Http.lua-
    Handle HttpRequests + util function for adding arguments into urls.
    Written by Jrelvas (23/2/2021)
]]--
type Dictionary&lt;T> = {[string]: T}

local HttpService = game:GetService("HttpService")

local function findEnumItem(enum: Enum, name: string): EnumItem
    for _, enumItem in ipairs(enum:GetEnumItems()) do
        if enumItem.Name == name then
            return enumItem
        end
    end
    return nil
end
local api = {}

function api.addParams(url: string, params: {[any]: any}): string
    url ..= "?"
    local isFirst = true

    for k, v in pairs(params) do
        local paramName = HttpService:UrlEncode(tostring(k))
        local paramValue = HttpService:UrlEncode(tostring(v))

        local paramUrl = string.format("%s=%s", paramName, paramValue)
        if not isFirst then
            paramUrl = "&amp;" ..paramUrl
        end
        url ..= paramUrl
        isFirst = false
    end

    return url
end

function api.fetch(url: string, options: Dictionary&lt;any>?, useInternal: boolean?)
    options = options or {}
    options.method = options.method or "GET"

    assert(type(options.method) == "string", "method must be a string")
    assert(type(options.headers) == "table" or not options.headers, "headers must be a dictionary of headers or nil")
    assert(type(options.body) == "string" or not options.body, "body must be a string or nil")

    if not useInternal then
        --if not HttpService.HttpEnabled then
        --    return {success = false, errorType = "HttpEnabled"}
        --end
        local success, returnedValue = pcall(HttpService.RequestAsync, HttpService, {
            Url = url,
            Method = options.method,
            Headers = options.headers,
            Body = options.body
        })
        if not success then
            print(returnedValue)
            if string.match(returnedValue, "Http requests are not enabled") then
                return {
                    success = false,
                    errorType = "HttpEnabled"
                }
            end
            return {
                success = false,
                errorType = "HttpError",
                httpError = findEnumItem(Enum.HttpError, string.gsub(returnedValue, "^HttpError: ", "")) or Enum.HttpError.Unknown
            }
        else
            returnedValue.success = true
            return returnedValue
        end
    else
        local co = coroutine.running()
        local data
        local request = HttpService:RequestInternal({
            Url = url,
            Method = options.method,
            Headers = options.headers,
            Body = options.body
        })

        coroutine.wrap(function()
            request:Start(function(success, result)
                print(success, result)
                result.success = success
                data = result
                coroutine.resume(co, result)
            end)
        end)()

        return data or coroutine.yield()
    end
end

return api</string>
      </Properties>
    </Item>
  </Item>
</roblox>